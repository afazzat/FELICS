/*
   Copyright : 2019 (C) Design team of Grain128-AEAD
   License   : We grant a free license to use and modify the code by anyone and in any way, for any purpose
   Cipher    : Grain128-AEAD for FELICS-AEAD framework
   Target    : 16-bit MSP430F1611, Fast speed code (C+ASM)
   Author    : Alexander Maximov
   Date      : 2019-11-25
 */

#include "grain_common.h"

uint16_t grain_update(GrainState * g)
{	
	uint16_t ln, nn, y, i;

#define LF(i) (*(uint32_t*)((uint8_t*)g->lfsr + i))
#define NF(i) (*(uint32_t*)((uint8_t*)g->nfsr + i))

	ln = (((((LF(0)>>1) ^ LF(4) ^ LF(8))>>5) ^ LF(10))>>1) ^ g->lfsr[0] ^ g->lfsr[6];
	
	uint32_t nf11 = NF(11)>>1;
	uint32_t t1 = NF(1)>>2;
	uint32_t t0 =
		 (((t1 ^ LF(11) ^ NF(5))>>1)
		^ NF(4) ^ ((LF(1)>>1) & LF(2)) ^ (LF(7) & (LF(9)>>3))
		^ NF(1) & ((nf11 & LF(11))>>2));

	y = nf11;
	nf11 >>= 1;
	nn = ((((nf11 & NF(11))>>1) & NF(11))>>4) & NF(11);
	nf11 >>= 1;
	nn ^= nf11;
	y ^= (((((t0>>2) ^ (nf11>>2) & LF(5)) ^ NF(0))>>1) ^ NF(9))>>1;
	y ^= g->nfsr[4];
	y ^= (t1>>2) & LF(1);

	nn ^= g->lfsr[0] ^ g->nfsr[0] ^ g->nfsr[6] ^ (g->nfsr[3] & (uint16_t)NF(5)) ^ (uint16_t)NF(7);

	nn ^= (NF(3)>>2);

	t0 = NF(2)>>1;
	nn ^= (((t0>>4) & NF(3))>>1) & NF(3);

	nn ^= (((((((NF(8) & NF(10))>>1) ^ (NF(0) & NF(8)) 
		^ (t1 & NF(1)) ^ (NF(3) & NF(7)))>>1)
		^ (((NF(8) & NF(9)) >> 4) & NF(10))) >> 1)
		^ ((NF(7)>>4) & NF(8)) ^ (NF(2) & t0)) >> 1;

	memcpy(g->lfsr, g->lfsr + 1, 30);
	g->lfsr[7] = ln;
	g->nfsr[7] = nn;
	return y;
}
